AWSTemplateFormatVersion: '2010-09-09'
Description: 'IAM Roles Anywhere Demo with ACM PKI Infrastructure'

Parameters:
  SigningAlgorithm:
    Type: String
    Default: SHA256WITHRSA
    AllowedValues:
      - SHA256WITHECDSA
      - SHA256WITHRSA
      - SHA384WITHECDSA
      - SHA384WITHRSA
      - SHA512WITHECDSA
      - SHA512WITHRSA
    Description: Enter a signing algorithm. Default is SHA256WITHRSA.
  KeyAlgorithm:
    Type: String
    Default: RSA_2048
    AllowedValues:
      - RSA_2048
      - EC_prime256v1
      - EC_secp384r1
      - RSA_4096
    Description: Enter a key algorithm. Default is RSA_2048.
  CACountry:
    Type: String
    Default: US
    Description: Enter the country for the subject of the CA.
  OrgName:
    Type: String
    Default: 'Demo Organization'
    Description: Enter the organization name for the subject of the CA.
  CACommonName:
    Type: String
    Default: 'demo.root.ca'
    Description: Enter the common name for the subject of the CA.
  CACertValidity:
    Type: Number
    Default: 10
    MinValue: 1
    Description: Enter the number of years the CA certificate is valid for.

Resources:
  # Create a Private Certificate Authority
  PrivateCA:
    Type: 'AWS::ACMPCA::CertificateAuthority'
    Properties:
      Type: ROOT
      KeyAlgorithm: !Ref KeyAlgorithm
      SigningAlgorithm: !Ref SigningAlgorithm
      Subject:
        Country: !Ref CACountry
        Organization: !Ref OrgName
        OrganizationalUnit: IT
        CommonName: !Ref CACommonName
      RevocationConfiguration:
        CrlConfiguration:
          Enabled: false

  # Create a certificate for the CA
  PCACert:
    Type: AWS::ACMPCA::Certificate
    Properties:
      CertificateAuthorityArn: !GetAtt PrivateCA.Arn
      CertificateSigningRequest: !GetAtt PrivateCA.CertificateSigningRequest
      SigningAlgorithm: !Ref SigningAlgorithm
      TemplateArn: 'arn:aws:acm-pca:::template/RootCACertificate/V1'
      Validity:
        Type: 'YEARS'
        Value: !Ref CACertValidity

  # Activate the CA with the certificate
  PCAActivation:
    Type: AWS::ACMPCA::CertificateAuthorityActivation
    Properties:
      CertificateAuthorityArn: !GetAtt PrivateCA.Arn
      Certificate: !GetAtt PCACert.Certificate
      Status: 'ACTIVE'

  DemoS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
        - '-'
        - - !Join
            - '-'
            - !Split [' ', !ToLower !Ref OrgName]
          - bucket
          - !Select 
            - 0
            - !Split ['-', !Ref AWS::AccountId]
          - !Ref AWS::Region
  
  # Create an IAM policy for S3 access
  S3AccessPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'Policy to allow S3 access for IAM Roles Anywhere demo'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 's3:ListAllMyBuckets'
              - 's3:ListBucket'
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:DeleteObject'
            Resource:
              - !GetAtt DemoS3Bucket.Arn
              - !Join ['', [!GetAtt DemoS3Bucket.Arn, '/*']]

  # Create IAM Role that can be assumed via IAM Roles Anywhere
  DemoIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'IAMRolesAnywhereDemoRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'rolesanywhere.amazonaws.com'
            Action: 
              - 'sts:AssumeRole'
              - 'sts:TagSession'
              - 'sts:SetSourceIdentity'
            Condition:
              ArnEquals:
                'aws:SourceArn': !GetAtt TrustAnchor.TrustAnchorArn              
      ManagedPolicyArns:
        - !Ref S3AccessPolicy

  # Create IAM Roles Anywhere Trust Anchor
  TrustAnchor:
    Type: 'AWS::RolesAnywhere::TrustAnchor'
    DependsOn: PCAActivation
    Properties:
      Name: 'DemoTrustAnchor'
      Enabled: true
      Source:
        SourceType: 'AWS_ACM_PCA'
        SourceData:
          AcmPcaArn: !GetAtt PrivateCA.Arn

  # Create IAM Roles Anywhere Profile
  Profile:
    Type: 'AWS::RolesAnywhere::Profile'
    Properties:
      Name: 'DemoProfile'
      Enabled: true
      RoleArns:
        - !GetAtt DemoIAMRole.Arn

Outputs:
  S3BucketName:
    Description: 'Name of the created S3 bucket'
    Value: !Ref DemoS3Bucket
  
  PrivateCAArn:
    Description: 'ARN of the Private Certificate Authority'
    Value: !GetAtt PrivateCA.Arn
  
  TrustAnchorArn:
    Description: 'ARN of the IAM Roles Anywhere Trust Anchor'
    Value: !GetAtt TrustAnchor.TrustAnchorArn
  
  ProfileArn:
    Description: 'ARN of the IAM Roles Anywhere Profile'
    Value: !GetAtt Profile.ProfileArn
  
  IAMRoleArn:
    Description: 'ARN of the IAM Role that can be assumed'
    Value: !GetAtt DemoIAMRole.Arn
  
  ClientCertInstructions:
    Description: 'Instructions to issue a client certificate'
    Value: !Sub |
      1. Create a private key on your Windows laptop:
         openssl genrsa -out private-key.pem 2048

      2. Create a Certificate Signing Request (CSR):
         openssl req -new -key private-key.pem -out csr.pem

      3. Issue a certificate using the CSR and Private CA:
         aws acm-pca issue-certificate \
           --certificate-authority-arn ${PrivateCA} \
           --csr fileb://csr.pem \
           --signing-algorithm ${SigningAlgorithm} \
           --validity Value=365,Type=DAYS

      4. Retrieve the certificate:
         aws acm-pca get-certificate \
           --certificate-authority-arn ${PrivateCA} \
           --certificate-arn <certificate-arn-from-previous-command> \
           --output text > certificate.pem

      5. Download the credential helper from: 
         https://github.com/aws/rolesanywhere-credential-helper/releases

      6. Install the credential helper on your Windows laptop

      7. Configure credential-process in your AWS CLI config file:
         [profile iamra-demo]
         credential_process = aws_signing_helper credential-process --certificate certificate.pem --private-key private-key.pem --trust-anchor-arn ${TrustAnchor.TrustAnchorArn} --profile-arn ${Profile.ProfileArn} --role-arn ${DemoIAMRole.Arn}

      8. Test access to the S3 bucket:
         aws s3 ls s3://${DemoS3Bucket} --profile iamra-demo