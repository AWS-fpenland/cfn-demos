AWSTemplateFormatVersion: '2010-09-09'
Description: 'IAM Roles Anywhere Demo with ACM PKI Infrastructure'

Resources:
  # Create a Private Certificate Authority
  PrivateCA:
    Type: 'AWS::ACMPCA::CertificateAuthority'
    Properties:
      Type: ROOT
      KeyAlgorithm: RSA_2048
      SigningAlgorithm: SHA256WITHRSA
      Subject:
        Country: US
        Organization: Demo Organization
        OrganizationalUnit: IT
        CommonName: Demo Root CA
      RevocationConfiguration:
        CrlConfiguration:
          Enabled: false

  # Lambda execution role for the custom resource
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: ACMPCAAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'acm-pca:GetCertificateAuthorityCertificate'
                  - 'acm-pca:GetCertificateAuthorityCsr'
                  - 'acm-pca:IssueCertificate'
                  - 'acm-pca:ImportCertificateAuthorityCertificate'
                  - 'acm-pca:UpdateCertificateAuthority'
                  - 'acm-pca:DescribeCertificateAuthority'
                Resource: !GetAtt PrivateCA.Arn

  # Lambda function to handle CA activation
  CAActivationFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: PrivateCA
    Properties:
      Handler: 'index.handler'
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: 'python3.9'
      Timeout: 300
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          import time

          def handler(event, context):
              response_data = {}
              try:
                  if event['RequestType'] in ['Create', 'Update']:
                      # Get the CA ARN from the event
                      ca_arn = event['ResourceProperties']['CertificateAuthorityArn']
                      
                      # Create clients
                      acmpca = boto3.client('acm-pca')
                      
                      # Wait for the CA to be created and in PENDING_CERTIFICATE state
                      print(f"Waiting for CA {ca_arn} to be ready...")
                      max_retries = 10
                      for i in range(max_retries):
                          try:
                              ca_response = acmpca.describe_certificate_authority(
                                  CertificateAuthorityArn=ca_arn
                              )
                              status = ca_response['CertificateAuthority']['Status']
                              print(f"Current CA status: {status}")
                              
                              if status == 'PENDING_CERTIFICATE':
                                  print("CA is in PENDING_CERTIFICATE state, proceeding...")
                                  break
                              elif status == 'CREATING':
                                  print("CA is still being created, waiting...")
                                  time.sleep(10)
                              else:
                                  raise Exception(f"CA is in unexpected state: {status}")
                          except Exception as e:
                              print(f"Error checking CA status: {str(e)}")
                              time.sleep(10)
                      else:
                          raise Exception(f"CA did not reach PENDING_CERTIFICATE state after {max_retries} attempts")
                      
                      # Get the CSR from the CA
                      print("Requesting CSR from the CA...")
                      max_retries = 5
                      for i in range(max_retries):
                          try:
                              csr_response = acmpca.get_certificate_authority_csr(
                                  CertificateAuthorityArn=ca_arn
                              )
                              csr = csr_response['Csr']
                              print("Successfully obtained CSR")
                              break
                          except Exception as e:
                              print(f"Error getting CSR (attempt {i+1}/{max_retries}): {str(e)}")
                              time.sleep(5)
                      else:
                          raise Exception("Failed to get CSR after multiple attempts")
                      
                      # Issue a certificate using the CSR
                      print("Issuing self-signed certificate...")
                      issue_response = acmpca.issue_certificate(
                          CertificateAuthorityArn=ca_arn,
                          Csr=csr,
                          SigningAlgorithm='SHA256WITHRSA',
                          Validity={
                              'Value': 3650,
                              'Type': 'DAYS'
                          },
                          IdempotencyToken='selfSignedCert1'
                      )
                      certificate_arn = issue_response['CertificateArn']
                      print(f"Certificate issuance initiated, ARN: {certificate_arn}")
                      
                      # Wait for certificate to be issued
                      print("Waiting for certificate to be issued...")
                      max_retries = 30
                      for i in range(max_retries):
                          try:
                              cert_response = acmpca.get_certificate(
                                  CertificateAuthorityArn=ca_arn,
                                  CertificateArn=certificate_arn
                              )
                              certificate = cert_response['Certificate']
                              print("Certificate has been issued successfully")
                              break
                          except acmpca.exceptions.RequestInProgressException:
                              print(f"Certificate issuance in progress (attempt {i+1}/{max_retries})...")
                              time.sleep(5)
                          except Exception as e:
                              print(f"Error checking certificate status: {str(e)}")
                              time.sleep(5)
                      else:
                          raise Exception("Certificate issuance timed out")
                      
                      # Import the certificate to activate the CA
                      print("Importing certificate to activate the CA...")
                      acmpca.import_certificate_authority_certificate(
                          CertificateAuthorityArn=ca_arn,
                          Certificate=certificate
                      )
                      print("Certificate imported successfully")
                      
                      # Wait for CA to become ACTIVE
                      print("Waiting for CA to become ACTIVE...")
                      max_retries = 10
                      for i in range(max_retries):
                          try:
                              ca_response = acmpca.describe_certificate_authority(
                                  CertificateAuthorityArn=ca_arn
                              )
                              status = ca_response['CertificateAuthority']['Status']
                              print(f"Current CA status: {status}")
                              
                              if status == 'ACTIVE':
                                  print("CA is now ACTIVE")
                                  break
                              else:
                                  print(f"CA is in state {status}, waiting...")
                                  time.sleep(10)
                          except Exception as e:
                              print(f"Error checking CA status: {str(e)}")
                              time.sleep(10)
                      else:
                          raise Exception(f"CA did not reach ACTIVE state after {max_retries} attempts")
                      
                      response_data = {
                          'CertificateAuthorityArn': ca_arn,
                          'Message': 'CA activated successfully'
                      }
                      
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {"Error": str(e)})

  # Custom resource to activate the CA
  CertificateAuthorityActivation:
    Type: 'Custom::CertificateAuthorityActivation'
    DependsOn: CAActivationFunction
    Properties:
      ServiceToken: !GetAtt CAActivationFunction.Arn
      CertificateAuthorityArn: !GetAtt PrivateCA.Arn

  # Create an S3 bucket
  DemoS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'iamra-demo-bucket-${AWS::AccountId}-${AWS::Region}'

  # Create an IAM policy for S3 access
  S3AccessPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'Policy to allow S3 access for IAM Roles Anywhere demo'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 's3:ListBucket'
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:DeleteObject'
            Resource:
              - !GetAtt DemoS3Bucket.Arn
              - !Join ['', [!GetAtt DemoS3Bucket.Arn, '/*']]

  # Create IAM Role that can be assumed via IAM Roles Anywhere
  DemoIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'IAMRolesAnywhereDemoRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'rolesanywhere.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref S3AccessPolicy

  # Create IAM Roles Anywhere Trust Anchor
  TrustAnchor:
    Type: 'AWS::RolesAnywhere::TrustAnchor'
    Properties:
      Name: 'DemoTrustAnchor'
      Source:
        SourceType: 'CERTIFICATE_BUNDLE'
        SourceData:
          AcmPcaArn: !Ref PrivateCA

  # Create IAM Roles Anywhere Profile
  Profile:
    Type: 'AWS::RolesAnywhere::Profile'
    Properties:
      Name: 'DemoProfile'
      RoleArns:
        - !GetAtt DemoIAMRole.Arn

Outputs:
  S3BucketName:
    Description: 'Name of the created S3 bucket'
    Value: !Ref DemoS3Bucket
  
  PrivateCAArn:
    Description: 'ARN of the Private Certificate Authority'
    Value: !Ref PrivateCA
  
  TrustAnchorArn:
    Description: 'ARN of the IAM Roles Anywhere Trust Anchor'
    Value: !Ref TrustAnchor
  
  ProfileArn:
    Description: 'ARN of the IAM Roles Anywhere Profile'
    Value: !Ref Profile
  
  IAMRoleArn:
    Description: 'ARN of the IAM Role that can be assumed'
    Value: !GetAtt DemoIAMRole.Arn
  
  ClientCertInstructions:
    Description: 'Instructions to issue a client certificate'
    Value: !Sub |
      1. Create a private key on your Windows laptop:
         openssl genrsa -out private-key.pem 2048

      2. Create a Certificate Signing Request (CSR):
         openssl req -new -key private-key.pem -out csr.pem

      3. Issue a certificate using the CSR and Private CA:
         aws acm-pca issue-certificate \
           --certificate-authority-arn ${PrivateCA} \
           --csr fileb://csr.pem \
           --signing-algorithm SHA256WITHRSA \
           --validity Value=365,Type=DAYS

      4. Retrieve the certificate:
         aws acm-pca get-certificate \
           --certificate-authority-arn ${PrivateCA} \
           --certificate-arn <certificate-arn-from-previous-command> \
           --output text > certificate.pem

      5. Download the credential helper from: 
         https://github.com/aws/rolesanywhere-credential-helper/releases

      6. Install the credential helper on your Windows laptop

      7. Configure credential-process in your AWS CLI config file:
         [profile iamra-demo]
         credential_process = aws_signing_helper credential-process --certificate certificate.pem --private-key private-key.pem --trust-anchor-arn ${TrustAnchor} --profile-arn ${Profile} --role-arn ${DemoIAMRole.Arn}

      8. Test access to the S3 bucket:
         aws s3 ls s3://${DemoS3Bucket} --profile iamra-demo